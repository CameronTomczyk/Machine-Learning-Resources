import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# Define the dataset with two classes: 'blue' and 'orange'
points = {
    'blue': [[2, 4], [1, 3], [2, 3], [3, 2], [2, 1]],
    'orange': [[5, 6], [4, 5], [4, 6], [6, 6], [5, 4]]
}

# Define a new point to classify
new_point = [3, 3]

# Function to calculate the Euclidean distance between two points
def euclidean_distance(p, q):
    return np.sqrt(np.sum((np.array(p) - np.array(q)) ** 2))

# Define the KNearestNeighbors class
class KNearestNeighbors:
    def __init__(self, k=3):
        self.k = k            # Number of nearest neighbors to consider
        self.points = None    # Placeholder for the training data

    # Method to fit the classifier with the training data
    def fit(self, points):
        self.points = points

    # Method to predict the class of a new data point
    def predict(self, new_point):
        distances = []

        # Calculate the distance from the new point to all other points in the dataset
        for category in self.points:
            for point in self.points[category]:
                distance = euclidean_distance(point, new_point)
                distances.append([distance, category])

        # Sort the distances and get the categories of the k nearest neighbors
        categories = [category[1] for category in sorted(distances)[:self.k]]

        # Determine the most common category among the nearest neighbors
        result = Counter(categories).most_common(1)[0][0]
        return result

# Create an instance of the classifier with k=3
clf = KNearestNeighbors(k=3)
clf.fit(points)  # Fit the classifier with the dataset
print(clf.predict(new_point))  # Predict and print the class of the new point

# Visualize KNN Distances

# Create a subplot
ax = plt.subplot()
ax.grid(False, color='#000000')

# Set background and grid colors
ax.set_facecolor('black')
ax.figure.set_facecolor('#121212')
ax.tick_params(axis='x', colors='white')
ax.tick_params(axis='y', colors='white')

# Plot the 'blue' class points
for point in points['blue']:
    ax.scatter(point[0], point[1], color='#104DCA', s=60)

# Plot the 'orange' class points
for point in points['orange']:
    ax.scatter(point[0], point[1], color='#EF6C35', s=60)

# Predict the class of the new point and set its color accordingly
new_class = clf.predict(new_point)
color = '#EF6C35' if new_class == 'orange' else '#104DCA'
ax.scatter(new_point[0], new_point[1], color=color, marker='*', s=200, zorder=100)

# Draw lines connecting the new point to all 'blue' class points
for point in points['blue']:
    ax.plot([new_point[0], point[0]], [new_point[1], point[1]],
            color='#104DCA', linestyle='--', linewidth=1)

# Draw lines connecting the new point to all 'orange' class points
for point in points['orange']:
    ax.plot([new_point[0], point[0]], [new_point[1], point[1]],
            color='#EF6C35', linestyle='--', linewidth=1)

plt.show()

# 3D Example

# Define a 3D dataset with two classes: 'blue' and 'orange'
points = {
    'blue': [[2, 4, 3], [1, 3, 5], [2, 3, 1], [3, 2, 3], [2, 1, 6]],
    'orange': [[5, 6, 5], [4, 5, 2], [4, 6, 1], [6, 6, 1], [5, 4, 6], [10, 10, 4]]
}

# Define a new 3D point to classify
new_point = [3, 3, 4]

# Fit the classifier with the 3D dataset
clf = KNearestNeighbors(k=3)
clf.fit(points)
print(clf.predict(new_point))  # Predict and print the class of the new 3D point

# Create a 3D plot
fig = plt.figure(figsize=(12, 12))
ax = fig.add_subplot(projection='3d')
ax.grid(True, color='#323232')

# Set background and grid colors for the 3D plot
ax.set_facecolor('black')
ax.figure.set_facecolor('#121212')
ax.tick_params(axis='x', colors='white')
ax.tick_params(axis='y', colors='white')

# Plot the 'blue' class points in 3D
for point in points['blue']:
    ax.scatter(point[0], point[1], point[2], color='#104DCA', s=60)

# Plot the 'orange' class points in 3D
for point in points['orange']:
    ax.scatter(point[0], point[1], point[2], color='#EF6C35', s=60)

# Predict the class of the new 3D point and set its color accordingly
new_class = clf.predict(new_point)
color = '#EF6C35' if new_class == 'orange' else '#104DCA'
ax.scatter(new_point[0], new_point[1], new_point[2],
           color=color, marker='*', s=200, zorder=100)

# Draw lines connecting the new point to all 'blue' class points in 3D
for point in points['blue']:
    ax.plot([new_point[0], point[0]],
            [new_point[1], point[1]],
            [new_point[2], point[2]],
            color='#104DCA', linestyle='--', linewidth=1)

# Draw lines connecting the new point to all 'orange' class points in 3D
for point in points['orange']:
    ax.plot([new_point[0], point[0]],
            [new_point[1], point[1]],
            [new_point[2], point[2]],
            color='#EF6C35', linestyle='--', linewidth=1)

plt.show()
