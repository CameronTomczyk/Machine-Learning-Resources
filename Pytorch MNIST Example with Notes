# Hyperparameter options:

# --batch-size: int (default: 64)
#     Input batch size for training.

# --test-batch-size: int (default: 1000)
#     Input batch size for testing.

# --epochs: int (default: 14)
#     Number of epochs to train.

# --lr: float (default: 1.0)
#     Learning rate.

# --gamma: float (default: 0.7)
#     Learning rate step gamma (decay factor for learning rate).

# --no-cuda: action='store_true' (default: False)
#     Disables CUDA training even if a GPU is available.

# --no-mps: action='store_true' (default: False)
#     Disables macOS GPU training using Metal Performance Shaders.

# --dry-run: action='store_true' (default: False)
#     Quickly check a single pass without full training.

# --seed: int (default: 1)
#     Random seed for reproducibility.

# --log-interval: int (default: 10)
#     How many batches to wait before logging training status.

# --save-model: action='store_true' (default: False)
#     For saving the current model after training completes.

# Model hyperparameters (defined within the Net class):

# Convolutional layers:
#     self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1)
#         - Input channels: 1 (grayscale images)
#         - Output channels: 32
#         - Kernel size: 3
#         - Stride: 1

#     self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1)
#         - Input channels: 32
#         - Output channels: 64
#         - Kernel size: 3
#         - Stride: 1

# Dropout layers:
#     self.dropout1 = nn.Dropout(0.25)
#         - Dropout probability: 0.25

#     self.dropout2 = nn.Dropout(0.5)
#         - Dropout probability: 0.5

# Fully connected layers:
#     self.fc1 = nn.Linear(9216, 128)
#         - Input features: 9216 (flattened feature map size)
#         - Output features: 128

#     self.fc2 = nn.Linear(128, 10)
#         - Input features: 128
#         - Output features: 10 (number of classes in MNIST)

# Data transformations:
#     transforms.Normalize((0.1307,), (0.3081,))
#         - Mean: 0.1307
#         - Standard deviation: 0.3081
#         - Normalizes the dataset with the mean and standard deviation of the MNIST dataset.



import argparse  # Module for parsing command-line options, arguments, and sub-commands
import torch  # PyTorch library
import torch.nn as nn  # Neural network module
import torch.nn.functional as F  # Common functions used in neural networks
import torch.optim as optim  # Optimization algorithms
from torchvision import datasets, transforms  # Datasets and data augmentation utilities
from torch.optim.lr_scheduler import StepLR  # Learning rate scheduler


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()  # Initialize the parent class
        self.conv1 = nn.Conv2d(1, 32, 3, 1)  # First convolutional layer (input channels, output channels, kernel size, stride)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)  # Second convolutional layer
        self.dropout1 = nn.Dropout(0.25)  # Dropout layer to prevent overfitting (dropout probability)
        self.dropout2 = nn.Dropout(0.5)  # Another dropout layer
        self.fc1 = nn.Linear(9216, 128)  # First fully connected layer (input features, output features)
        self.fc2 = nn.Linear(128, 10)  # Second fully connected layer (outputting class scores)

    def forward(self, x):
        x = self.conv1(x)  # Apply first convolution
        x = F.relu(x)  # Apply ReLU activation
        x = self.conv2(x)  # Apply second convolution
        x = F.relu(x)  # Apply ReLU activation
        x = F.max_pool2d(x, 2)  # Apply 2D max pooling (kernel size 2)
        x = self.dropout1(x)  # Apply dropout
        x = torch.flatten(x, 1)  # Flatten the tensor except for the batch dimension
        x = self.fc1(x)  # Apply first fully connected layer
        x = F.relu(x)  # Apply ReLU activation
        x = self.dropout2(x)  # Apply dropout
        x = self.fc2(x)  # Apply second fully connected layer
        output = F.log_softmax(x, dim=1)  # Apply log-softmax on output
        return output  # Return the output probabilities


def train(args, model, device, train_loader, optimizer, epoch):
    model.train()  # Set model to training mode
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)  # Move data to the specified device
        optimizer.zero_grad()  # Zero the parameter gradients
        output = model(data)  # Forward pass
        loss = F.nll_loss(output, target)  # Compute negative log-likelihood loss
        loss.backward()  # Backward pass
        optimizer.step()  # Update model parameters
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))
            if args.dry_run:
                break  # Exit after the first batch if dry run is enabled


def test(model, device, test_loader):
    model.eval()  # Set model to evaluation mode
    test_loss = 0
    correct = 0
    with torch.no_grad():  # Disable gradient calculation
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)  # Move data to the specified device
            output = model(data)  # Forward pass
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # Sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # Get index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()  # Count correct predictions

    test_loss /= len(test_loader.dataset)  # Calculate average loss

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))  # Print test results


def main():
    # Training settings
    parser = argparse.ArgumentParser(description='PyTorch MNIST Example')  # Create argument parser
    parser.add_argument('--batch-size', type=int, default=64, metavar='N',
                        help='input batch size for training (default: 64)')  # Training batch size
    parser.add_argument('--test-batch-size', type=int, default=1000, metavar='N',
                        help='input batch size for testing (default: 1000)')  # Testing batch size
    parser.add_argument('--epochs', type=int, default=14, metavar='N',
                        help='number of epochs to train (default: 14)')  # Number of training epochs
    parser.add_argument('--lr', type=float, default=1.0, metavar='LR',
                        help='learning rate (default: 1.0)')  # Learning rate
    parser.add_argument('--gamma', type=float, default=0.7, metavar='M',
                        help='Learning rate step gamma (default: 0.7)')  # Learning rate decay factor
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='disables CUDA training')  # Flag to disable CUDA
    parser.add_argument('--no-mps', action='store_true', default=False,
                        help='disables macOS GPU training')  # Flag to disable MPS (MacOS GPU)
    parser.add_argument('--dry-run', action='store_true', default=False,
                        help='quickly check a single pass')  # Flag for a quick run
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')  # Random seed
    parser.add_argument('--log-interval', type=int, default=10, metavar='N',
                        help='how many batches to wait before logging training status')  # Logging interval
    parser.add_argument('--save-model', action='store_true', default=False,
                        help='For Saving the current Model')  # Flag to save the model
    args = parser.parse_args()  # Parse command-line arguments
    use_cuda = not args.no_cuda and torch.cuda.is_available()  # Check if CUDA is available and not disabled
    use_mps = not args.no_mps and torch.backends.mps.is_available()  # Check if MPS is available and not disabled

    torch.manual_seed(args.seed)  # Set the random seed

    if use_cuda:
        device = torch.device("cuda")  # Use CUDA device
    elif use_mps:
        device = torch.device("mps")  # Use MPS device
    else:
        device = torch.device("cpu")  # Use CPU

    train_kwargs = {'batch_size': args.batch_size}  # Training DataLoader parameters
    test_kwargs = {'batch_size': args.test_batch_size}  # Testing DataLoader parameters
    if use_cuda:
        cuda_kwargs = {'num_workers': 1,  # Number of subprocesses for data loading
                       'pin_memory': True,  # Copy Tensors into CUDA pinned memory
                       'shuffle': True}  # Shuffle dataset every epoch
        train_kwargs.update(cuda_kwargs)  # Update training DataLoader parameters
        test_kwargs.update(cuda_kwargs)  # Update testing DataLoader parameters

    transform = transforms.Compose([
        transforms.ToTensor(),  # Convert images to PyTorch tensors
        transforms.Normalize((0.1307,), (0.3081,))  # Normalize tensors with mean and std deviation
    ])
    dataset1 = datasets.MNIST('../data', train=True, download=True,
                              transform=transform)  # Load training dataset
    dataset2 = datasets.MNIST('../data', train=False,
                              transform=transform)  # Load testing dataset
    train_loader = torch.utils.data.DataLoader(dataset1, **train_kwargs)  # Create DataLoader for training data
    test_loader = torch.utils.data.DataLoader(dataset2, **test_kwargs)  # Create DataLoader for testing data

    model = Net().to(device)  # Instantiate the model and move it to the device
    optimizer = optim.Adadelta(model.parameters(), lr=args.lr)  # Use Adadelta optimizer

    scheduler = StepLR(optimizer, step_size=1, gamma=args.gamma)  # Set up learning rate scheduler
    for epoch in range(1, args.epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch)  # Train the model
        test(model, device, test_loader)  # Evaluate the model
        scheduler.step()  # Adjust the learning rate

    if args.save_model:
        torch.save(model.state_dict(), "mnist_cnn.pt")  # Save the trained model


if __name__ == '__main__':
    main()  # Entry point of the script
